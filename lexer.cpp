#line 2 "lexer.cpp"
#line 17 "lexer.l"

#include <sstream>
#include <stdexcept>
#include "LexerContext.h"
#include "TipPodNode.h"
#include "TipPodUtils.h"
#include "TipPodValue.h"
#include "parser.h"

    /*
        The YY_USER_ACTION macro lets us manually track the current 
        line and column.  See also 'struct YYLTYPE' in parser.y.
    */
#define YY_USER_ACTION {yylloc->first_line = yylineno;                              \
                        yylloc->first_column = yylloc->current_column;              \
                        yylloc->current_column = yylloc->current_column + yyleng;   \
                        yylloc->last_column = yylloc->current_column;               \
                        yylloc->last_line = yylineno;                               \
                        yylloc->current_line += yytext;}



#line 26 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else    /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif    /* defined (__STDC__) */
#endif    /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
        *yy_cp = yyg->yy_hold_char; \
        YY_RESTORE_YY_MORE_OFFSET \
        yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
    {
    FILE *yy_input_file;

    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;        /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    yy_size_t yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2

    };
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
    if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
        YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
    } \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
    if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
        YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
    } \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef char YY_CHAR;

typedef yyconst struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yyg->yytext_ptr = yy_bp; \
    yyleng = (size_t) (yy_cp - yy_bp); \
    yyg->yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 38
#define YY_END_OF_BUFFER 39
struct yy_trans_info
    {
    flex_int16_t yy_verify;
    flex_int16_t yy_nxt;
    };
static yyconst struct yy_trans_info yy_transition[3965] =
    {
 {   0,   0 }, {   0,3837 }, {   0,   0 }, {   0,3835 }, {   1,1040 },
 {   2,1040 }, {   3,1040 }, {   4,1040 }, {   5,1040 }, {   6,1040 },
 {   7,1040 }, {   8,1040 }, {   9,1042 }, {  10,1044 }, {  11,1040 },
 {  12,1040 }, {  13,1046 }, {  14,1040 }, {  15,1040 }, {  16,1040 },
 {  17,1040 }, {  18,1040 }, {  19,1040 }, {  20,1040 }, {  21,1040 },
 {  22,1040 }, {  23,1040 }, {  24,1040 }, {  25,1040 }, {  26,1040 },
 {  27,1040 }, {  28,1040 }, {  29,1040 }, {  30,1040 }, {  31,1040 },
 {  32,1042 }, {  33,1040 }, {  34,1048 }, {  35,1058 }, {  36,1040 },
 {  37,1040 }, {  38,1040 }, {  39,1040 }, {  40,1040 }, {  41,1040 },
 {  42,1040 }, {  43,1188 }, {  44,1040 }, {  45,1188 }, {  46,1198 },

 {  47,1214 }, {  48,1220 }, {  49,1220 }, {  50,1220 }, {  51,1220 },
 {  52,1220 }, {  53,1220 }, {  54,1220 }, {  55,1220 }, {  56,1220 },
 {  57,1220 }, {  58,1222 }, {  59,1224 }, {  60,1258 }, {  61,1226 },
 {  62,1040 }, {  63,1040 }, {  64,1040 }, {  65,1350 }, {  66,1350 },
 {  67,1350 }, {  68,1350 }, {  69,1350 }, {  70,1442 }, {  71,1350 },
 {  72,1350 }, {  73,1350 }, {  74,1350 }, {  75,1350 }, {  76,1350 },
 {  77,1350 }, {  78,1350 }, {  79,1350 }, {  80,1350 }, {  81,1350 },
 {  82,1350 }, {  83,1350 }, {  84,1534 }, {  85,1350 }, {  86,1350 },
 {  87,1350 }, {  88,1350 }, {  89,1350 }, {  90,1350 }, {  91,1228 },
 {  92,1040 }, {  93,1230 }, {  94,1040 }, {  95,1350 }, {  96,1040 },

 {  97,1350 }, {  98,1350 }, {  99,1350 }, { 100,1350 }, { 101,1350 },
 { 102,1442 }, { 103,1350 }, { 104,1350 }, { 105,1350 }, { 106,1350 },
 { 107,1350 }, { 108,1350 }, { 109,1350 }, { 110,1350 }, { 111,1350 },
 { 112,1350 }, { 113,1350 }, { 114,1350 }, { 115,1350 }, { 116,1534 },
 { 117,1350 }, { 118,1350 }, { 119,1350 }, { 120,1350 }, { 121,1350 },
 { 122,1350 }, { 123,1232 }, { 124,1040 }, { 125,1260 }, { 126,1040 },
 { 127,1040 }, { 128,1040 }, {   0,   0 }, {   0,3705 }, {   1, 910 },
 {   2, 910 }, {   3, 910 }, {   4, 910 }, {   5, 910 }, {   6, 910 },
 {   7, 910 }, {   8, 910 }, {   9, 912 }, {  10, 914 }, {  11, 910 },
 {  12, 910 }, {  13, 916 }, {  14, 910 }, {  15, 910 }, {  16, 910 },

 {  17, 910 }, {  18, 910 }, {  19, 910 }, {  20, 910 }, {  21, 910 },
 {  22, 910 }, {  23, 910 }, {  24, 910 }, {  25, 910 }, {  26, 910 },
 {  27, 910 }, {  28, 910 }, {  29, 910 }, {  30, 910 }, {  31, 910 },
 {  32, 912 }, {  33, 910 }, {  34, 918 }, {  35, 928 }, {  36, 910 },
 {  37, 910 }, {  38, 910 }, {  39, 910 }, {  40, 910 }, {  41, 910 },
 {  42, 910 }, {  43,1058 }, {  44, 910 }, {  45,1058 }, {  46,1068 },
 {  47,1084 }, {  48,1090 }, {  49,1090 }, {  50,1090 }, {  51,1090 },
 {  52,1090 }, {  53,1090 }, {  54,1090 }, {  55,1090 }, {  56,1090 },
 {  57,1090 }, {  58,1092 }, {  59,1094 }, {  60,1128 }, {  61,1096 },
 {  62, 910 }, {  63, 910 }, {  64, 910 }, {  65,1220 }, {  66,1220 },

 {  67,1220 }, {  68,1220 }, {  69,1220 }, {  70,1312 }, {  71,1220 },
 {  72,1220 }, {  73,1220 }, {  74,1220 }, {  75,1220 }, {  76,1220 },
 {  77,1220 }, {  78,1220 }, {  79,1220 }, {  80,1220 }, {  81,1220 },
 {  82,1220 }, {  83,1220 }, {  84,1404 }, {  85,1220 }, {  86,1220 },
 {  87,1220 }, {  88,1220 }, {  89,1220 }, {  90,1220 }, {  91,1098 },
 {  92, 910 }, {  93,1100 }, {  94, 910 }, {  95,1220 }, {  96, 910 },
 {  97,1220 }, {  98,1220 }, {  99,1220 }, { 100,1220 }, { 101,1220 },
 { 102,1312 }, { 103,1220 }, { 104,1220 }, { 105,1220 }, { 106,1220 },
 { 107,1220 }, { 108,1220 }, { 109,1220 }, { 110,1220 }, { 111,1220 },
 { 112,1220 }, { 113,1220 }, { 114,1220 }, { 115,1220 }, { 116,1404 },

 { 117,1220 }, { 118,1220 }, { 119,1220 }, { 120,1220 }, { 121,1220 },
 { 122,1220 }, { 123,1102 }, { 124, 910 }, { 125,1130 }, { 126, 910 },
 { 127, 910 }, { 128, 910 }, {   0,   0 }, {   0,3575 }, {   1,1003 },
 {   2,1003 }, {   3,1003 }, {   4,1003 }, {   5,1003 }, {   6,1003 },
 {   7,1003 }, {   8,1003 }, {   9,1003 }, {  10,1005 }, {  11,1003 },
 {  12,1003 }, {  13,1022 }, {  14,1003 }, {  15,1003 }, {  16,1003 },
 {  17,1003 }, {  18,1003 }, {  19,1003 }, {  20,1003 }, {  21,1003 },
 {  22,1003 }, {  23,1003 }, {  24,1003 }, {  25,1003 }, {  26,1003 },
 {  27,1003 }, {  28,1003 }, {  29,1003 }, {  30,1003 }, {  31,1003 },
 {  32,1003 }, {  33,1003 }, {  34,1003 }, {  35,1003 }, {  36,1003 },

 {  37,1003 }, {  38,1003 }, {  39,1003 }, {  40,1003 }, {  41,1003 },
 {  42,1003 }, {  43,1003 }, {  44,1003 }, {  45,1003 }, {  46,1003 },
 {  47,1003 }, {  48,1003 }, {  49,1003 }, {  50,1003 }, {  51,1003 },
 {  52,1003 }, {  53,1003 }, {  54,1003 }, {  55,1003 }, {  56,1003 },
 {  57,1003 }, {  58,1003 }, {  59,1003 }, {  60,1044 }, {  61,1003 },
 {  62,1003 }, {  63,1003 }, {  64,1003 }, {  65,1003 }, {  66,1003 },
 {  67,1003 }, {  68,1003 }, {  69,1003 }, {  70,1003 }, {  71,1003 },
 {  72,1003 }, {  73,1003 }, {  74,1003 }, {  75,1003 }, {  76,1003 },
 {  77,1003 }, {  78,1003 }, {  79,1003 }, {  80,1003 }, {  81,1003 },
 {  82,1003 }, {  83,1003 }, {  84,1003 }, {  85,1003 }, {  86,1003 },

 {  87,1003 }, {  88,1003 }, {  89,1003 }, {  90,1003 }, {  91,1003 },
 {  92,1003 }, {  93,1003 }, {  94,1003 }, {  95,1003 }, {  96,1003 },
 {  97,1003 }, {  98,1003 }, {  99,1003 }, { 100,1003 }, { 101,1003 },
 { 102,1003 }, { 103,1003 }, { 104,1003 }, { 105,1003 }, { 106,1003 },
 { 107,1003 }, { 108,1003 }, { 109,1003 }, { 110,1003 }, { 111,1003 },
 { 112,1003 }, { 113,1003 }, { 114,1003 }, { 115,1003 }, { 116,1003 },
 { 117,1003 }, { 118,1003 }, { 119,1003 }, { 120,1003 }, { 121,1003 },
 { 122,1003 }, { 123,1003 }, { 124,1003 }, { 125,1003 }, { 126,1003 },
 { 127,1003 }, { 128,1003 }, {   0,   0 }, {   0,3445 }, {   1, 873 },
 {   2, 873 }, {   3, 873 }, {   4, 873 }, {   5, 873 }, {   6, 873 },

 {   7, 873 }, {   8, 873 }, {   9, 873 }, {  10, 875 }, {  11, 873 },
 {  12, 873 }, {  13, 892 }, {  14, 873 }, {  15, 873 }, {  16, 873 },
 {  17, 873 }, {  18, 873 }, {  19, 873 }, {  20, 873 }, {  21, 873 },
 {  22, 873 }, {  23, 873 }, {  24, 873 }, {  25, 873 }, {  26, 873 },
 {  27, 873 }, {  28, 873 }, {  29, 873 }, {  30, 873 }, {  31, 873 },
 {  32, 873 }, {  33, 873 }, {  34, 873 }, {  35, 873 }, {  36, 873 },
 {  37, 873 }, {  38, 873 }, {  39, 873 }, {  40, 873 }, {  41, 873 },
 {  42, 873 }, {  43, 873 }, {  44, 873 }, {  45, 873 }, {  46, 873 },
 {  47, 873 }, {  48, 873 }, {  49, 873 }, {  50, 873 }, {  51, 873 },
 {  52, 873 }, {  53, 873 }, {  54, 873 }, {  55, 873 }, {  56, 873 },

 {  57, 873 }, {  58, 873 }, {  59, 873 }, {  60, 914 }, {  61, 873 },
 {  62, 873 }, {  63, 873 }, {  64, 873 }, {  65, 873 }, {  66, 873 },
 {  67, 873 }, {  68, 873 }, {  69, 873 }, {  70, 873 }, {  71, 873 },
 {  72, 873 }, {  73, 873 }, {  74, 873 }, {  75, 873 }, {  76, 873 },
 {  77, 873 }, {  78, 873 }, {  79, 873 }, {  80, 873 }, {  81, 873 },
 {  82, 873 }, {  83, 873 }, {  84, 873 }, {  85, 873 }, {  86, 873 },
 {  87, 873 }, {  88, 873 }, {  89, 873 }, {  90, 873 }, {  91, 873 },
 {  92, 873 }, {  93, 873 }, {  94, 873 }, {  95, 873 }, {  96, 873 },
 {  97, 873 }, {  98, 873 }, {  99, 873 }, { 100, 873 }, { 101, 873 },
 { 102, 873 }, { 103, 873 }, { 104, 873 }, { 105, 873 }, { 106, 873 },

 { 107, 873 }, { 108, 873 }, { 109, 873 }, { 110, 873 }, { 111, 873 },
 { 112, 873 }, { 113, 873 }, { 114, 873 }, { 115, 873 }, { 116, 873 },
 { 117, 873 }, { 118, 873 }, { 119, 873 }, { 120, 873 }, { 121, 873 },
 { 122, 873 }, { 123, 873 }, { 124, 873 }, { 125, 873 }, { 126, 873 },
 { 127, 873 }, { 128, 873 }, {   0,   0 }, {   0,3315 }, {   1, 786 },
 {   2, 786 }, {   3, 786 }, {   4, 786 }, {   5, 786 }, {   6, 786 },
 {   7, 786 }, {   8, 786 }, {   9, 786 }, {  10, 788 }, {  11, 786 },
 {  12, 786 }, {  13, 790 }, {  14, 786 }, {  15, 786 }, {  16, 786 },
 {  17, 786 }, {  18, 786 }, {  19, 786 }, {  20, 786 }, {  21, 786 },
 {  22, 786 }, {  23, 786 }, {  24, 786 }, {  25, 786 }, {  26, 786 },

 {  27, 786 }, {  28, 786 }, {  29, 786 }, {  30, 786 }, {  31, 786 },
 {  32, 786 }, {  33, 786 }, {  34, 786 }, {  35, 786 }, {  36, 786 },
 {  37, 786 }, {  38, 786 }, {  39, 786 }, {  40, 786 }, {  41, 786 },
 {  42, 876 }, {  43, 786 }, {  44, 786 }, {  45, 786 }, {  46, 786 },
 {  47, 786 }, {  48, 786 }, {  49, 786 }, {  50, 786 }, {  51, 786 },
 {  52, 786 }, {  53, 786 }, {  54, 786 }, {  55, 786 }, {  56, 786 },
 {  57, 786 }, {  58, 786 }, {  59, 786 }, {  60, 786 }, {  61, 786 },
 {  62, 786 }, {  63, 786 }, {  64, 786 }, {  65, 786 }, {  66, 786 },
 {  67, 786 }, {  68, 786 }, {  69, 786 }, {  70, 786 }, {  71, 786 },
 {  72, 786 }, {  73, 786 }, {  74, 786 }, {  75, 786 }, {  76, 786 },

 {  77, 786 }, {  78, 786 }, {  79, 786 }, {  80, 786 }, {  81, 786 },
 {  82, 786 }, {  83, 786 }, {  84, 786 }, {  85, 786 }, {  86, 786 },
 {  87, 786 }, {  88, 786 }, {  89, 786 }, {  90, 786 }, {  91, 786 },
 {  92, 786 }, {  93, 786 }, {  94, 786 }, {  95, 786 }, {  96, 786 },
 {  97, 786 }, {  98, 786 }, {  99, 786 }, { 100, 786 }, { 101, 786 },
 { 102, 786 }, { 103, 786 }, { 104, 786 }, { 105, 786 }, { 106, 786 },
 { 107, 786 }, { 108, 786 }, { 109, 786 }, { 110, 786 }, { 111, 786 },
 { 112, 786 }, { 113, 786 }, { 114, 786 }, { 115, 786 }, { 116, 786 },
 { 117, 786 }, { 118, 786 }, { 119, 786 }, { 120, 786 }, { 121, 786 },
 { 122, 786 }, { 123, 786 }, { 124, 786 }, { 125, 786 }, { 126, 786 },

 { 127, 786 }, { 128, 786 }, {   0,   0 }, {   0,3185 }, {   1, 656 },
 {   2, 656 }, {   3, 656 }, {   4, 656 }, {   5, 656 }, {   6, 656 },
 {   7, 656 }, {   8, 656 }, {   9, 656 }, {  10, 658 }, {  11, 656 },
 {  12, 656 }, {  13, 660 }, {  14, 656 }, {  15, 656 }, {  16, 656 },
 {  17, 656 }, {  18, 656 }, {  19, 656 }, {  20, 656 }, {  21, 656 },
 {  22, 656 }, {  23, 656 }, {  24, 656 }, {  25, 656 }, {  26, 656 },
 {  27, 656 }, {  28, 656 }, {  29, 656 }, {  30, 656 }, {  31, 656 },
 {  32, 656 }, {  33, 656 }, {  34, 656 }, {  35, 656 }, {  36, 656 },
 {  37, 656 }, {  38, 656 }, {  39, 656 }, {  40, 656 }, {  41, 656 },
 {  42, 746 }, {  43, 656 }, {  44, 656 }, {  45, 656 }, {  46, 656 },

 {  47, 656 }, {  48, 656 }, {  49, 656 }, {  50, 656 }, {  51, 656 },
 {  52, 656 }, {  53, 656 }, {  54, 656 }, {  55, 656 }, {  56, 656 },
 {  57, 656 }, {  58, 656 }, {  59, 656 }, {  60, 656 }, {  61, 656 },
 {  62, 656 }, {  63, 656 }, {  64, 656 }, {  65, 656 }, {  66, 656 },
 {  67, 656 }, {  68, 656 }, {  69, 656 }, {  70, 656 }, {  71, 656 },
 {  72, 656 }, {  73, 656 }, {  74, 656 }, {  75, 656 }, {  76, 656 },
 {  77, 656 }, {  78, 656 }, {  79, 656 }, {  80, 656 }, {  81, 656 },
 {  82, 656 }, {  83, 656 }, {  84, 656 }, {  85, 656 }, {  86, 656 },
 {  87, 656 }, {  88, 656 }, {  89, 656 }, {  90, 656 }, {  91, 656 },
 {  92, 656 }, {  93, 656 }, {  94, 656 }, {  95, 656 }, {  96, 656 },

 {  97, 656 }, {  98, 656 }, {  99, 656 }, { 100, 656 }, { 101, 656 },
 { 102, 656 }, { 103, 656 }, { 104, 656 }, { 105, 656 }, { 106, 656 },
 { 107, 656 }, { 108, 656 }, { 109, 656 }, { 110, 656 }, { 111, 656 },
 { 112, 656 }, { 113, 656 }, { 114, 656 }, { 115, 656 }, { 116, 656 },
 { 117, 656 }, { 118, 656 }, { 119, 656 }, { 120, 656 }, { 121, 656 },
 { 122, 656 }, { 123, 656 }, { 124, 656 }, { 125, 656 }, { 126, 656 },
 { 127, 656 }, { 128, 656 }, {   0,   0 }, {   0,3055 }, {   1, 629 },
 {   2, 629 }, {   3, 629 }, {   4, 629 }, {   5, 629 }, {   6, 629 },
 {   7, 629 }, {   8, 629 }, {   9, 629 }, {  10, 631 }, {  11, 629 },
 {  12, 629 }, {  13, 694 }, {  14, 629 }, {  15, 629 }, {  16, 629 },

 {  17, 629 }, {  18, 629 }, {  19, 629 }, {  20, 629 }, {  21, 629 },
 {  22, 629 }, {  23, 629 }, {  24, 629 }, {  25, 629 }, {  26, 629 },
 {  27, 629 }, {  28, 629 }, {  29, 629 }, {  30, 629 }, {  31, 629 },
 {  32, 629 }, {  33, 629 }, {  34, 696 }, {  35, 629 }, {  36, 629 },
 {  37, 629 }, {  38, 629 }, {  39, 698 }, {  40, 629 }, {  41, 629 },
 {  42, 629 }, {  43, 629 }, {  44, 629 }, {  45, 629 }, {  46, 629 },
 {  47, 629 }, {  48, 629 }, {  49, 629 }, {  50, 629 }, {  51, 629 },
 {  52, 629 }, {  53, 629 }, {  54, 629 }, {  55, 629 }, {  56, 629 },
 {  57, 629 }, {  58, 629 }, {  59, 629 }, {  60, 629 }, {  61, 629 },
 {  62, 629 }, {  63, 629 }, {  64, 629 }, {  65, 629 }, {  66, 629 },

 {  67, 629 }, {  68, 629 }, {  69, 629 }, {  70, 629 }, {  71, 629 },
 {  72, 629 }, {  73, 629 }, {  74, 629 }, {  75, 629 }, {  76, 629 },
 {  77, 629 }, {  78, 629 }, {  79, 629 }, {  80, 629 }, {  81, 629 },
 {  82, 629 }, {  83, 629 }, {  84, 629 }, {  85, 629 }, {  86, 629 },
 {  87, 629 }, {  88, 629 }, {  89, 629 }, {  90, 629 }, {  91, 629 },
 {  92, 813 }, {  93, 629 }, {  94, 629 }, {  95, 629 }, {  96, 629 },
 {  97, 629 }, {  98, 629 }, {  99, 629 }, { 100, 629 }, { 101, 629 },
 { 102, 629 }, { 103, 629 }, { 104, 629 }, { 105, 629 }, { 106, 629 },
 { 107, 629 }, { 108, 629 }, { 109, 629 }, { 110, 629 }, { 111, 629 },
 { 112, 629 }, { 113, 629 }, { 114, 629 }, { 115, 629 }, { 116, 629 },

 { 117, 629 }, { 118, 629 }, { 119, 629 }, { 120, 629 }, { 121, 629 },
 { 122, 629 }, { 123, 629 }, { 124, 629 }, { 125, 629 }, { 126, 629 },
 { 127, 629 }, { 128, 629 }, {   0,   0 }, {   0,2925 }, {   1, 499 },
 {   2, 499 }, {   3, 499 }, {   4, 499 }, {   5, 499 }, {   6, 499 },
 {   7, 499 }, {   8, 499 }, {   9, 499 }, {  10, 501 }, {  11, 499 },
 {  12, 499 }, {  13, 564 }, {  14, 499 }, {  15, 499 }, {  16, 499 },
 {  17, 499 }, {  18, 499 }, {  19, 499 }, {  20, 499 }, {  21, 499 },
 {  22, 499 }, {  23, 499 }, {  24, 499 }, {  25, 499 }, {  26, 499 },
 {  27, 499 }, {  28, 499 }, {  29, 499 }, {  30, 499 }, {  31, 499 },
 {  32, 499 }, {  33, 499 }, {  34, 566 }, {  35, 499 }, {  36, 499 },

 {  37, 499 }, {  38, 499 }, {  39, 568 }, {  40, 499 }, {  41, 499 },
 {  42, 499 }, {  43, 499 }, {  44, 499 }, {  45, 499 }, {  46, 499 },
 {  47, 499 }, {  48, 499 }, {  49, 499 }, {  50, 499 }, {  51, 499 },
 {  52, 499 }, {  53, 499 }, {  54, 499 }, {  55, 499 }, {  56, 499 },
 {  57, 499 }, {  58, 499 }, {  59, 499 }, {  60, 499 }, {  61, 499 },
 {  62, 499 }, {  63, 499 }, {  64, 499 }, {  65, 499 }, {  66, 499 },
 {  67, 499 }, {  68, 499 }, {  69, 499 }, {  70, 499 }, {  71, 499 },
 {  72, 499 }, {  73, 499 }, {  74, 499 }, {  75, 499 }, {  76, 499 },
 {  77, 499 }, {  78, 499 }, {  79, 499 }, {  80, 499 }, {  81, 499 },
 {  82, 499 }, {  83, 499 }, {  84, 499 }, {  85, 499 }, {  86, 499 },

 {  87, 499 }, {  88, 499 }, {  89, 499 }, {  90, 499 }, {  91, 499 },
 {  92, 683 }, {  93, 499 }, {  94, 499 }, {  95, 499 }, {  96, 499 },
 {  97, 499 }, {  98, 499 }, {  99, 499 }, { 100, 499 }, { 101, 499 },
 { 102, 499 }, { 103, 499 }, { 104, 499 }, { 105, 499 }, { 106, 499 },
 { 107, 499 }, { 108, 499 }, { 109, 499 }, { 110, 499 }, { 111, 499 },
 { 112, 499 }, { 113, 499 }, { 114, 499 }, { 115, 499 }, { 116, 499 },
 { 117, 499 }, { 118, 499 }, { 119, 499 }, { 120, 499 }, { 121, 499 },
 { 122, 499 }, { 123, 499 }, { 124, 499 }, { 125, 499 }, { 126, 499 },
 { 127, 499 }, { 128, 499 }, {   0,  37 }, {   0,2795 }, {   0,   2 },
 {   0,2793 }, {   0,   1 }, {   0,2791 }, {   0,  37 }, {   0,2789 },

 {   0,  25 }, {   0,2787 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 434 },
 {   0,  37 }, {   0,2777 }, {   1, 653 }, {   2, 653 }, {   3, 653 },
 {   4, 653 }, {   5, 653 }, {   6, 653 }, {   7, 653 }, {   8, 653 },
 {   9, 653 }, {  10, 424 }, {  11, 653 }, {  12, 653 }, {  13, 783 },
 {  14, 653 }, {  15, 653 }, {  16, 653 }, {  17, 653 }, {  18, 653 },
 {  19, 653 }, {  20, 653 }, {  21, 653 }, {  22, 653 }, {  23, 653 },
 {  24, 653 }, {  25, 653 }, {  26, 653 }, {  27, 653 }, {  28, 653 },
 {  29, 653 }, {  30, 653 }, {  31, 653 }, {  32, 653 }, {  33, 653 },
 {  34, 653 }, {  35, 653 }, {  36, 653 }, {  37, 653 }, {  38, 653 },

 {  39, 653 }, {  40, 653 }, {  41, 653 }, {  42, 653 }, {  43, 653 },
 {  44, 653 }, {  45, 653 }, {  46, 653 }, {  47, 653 }, {  48, 653 },
 {  49, 653 }, {  50, 653 }, {  51, 653 }, {  52, 653 }, {  53, 653 },
 {  54, 653 }, {  55, 653 }, {  56, 653 }, {  57, 653 }, {  58, 653 },
 {  59, 653 }, {  60, 653 }, {  61, 653 }, {  62, 653 }, {  63, 653 },
 {  64, 653 }, {  65, 653 }, {  66, 653 }, {  67, 653 }, {  68, 653 },
 {  69, 653 }, {  70, 653 }, {  71, 653 }, {  72, 653 }, {  73, 653 },
 {  74, 653 }, {  75, 653 }, {  76, 653 }, {  77, 653 }, {  78, 653 },
 {  79, 653 }, {  80, 653 }, {  81, 653 }, {  82, 653 }, {  83, 653 },
 {  84, 653 }, {  85, 653 }, {  86, 653 }, {  87, 653 }, {  88, 653 },

 {  89, 653 }, {  90, 653 }, {  91, 653 }, {  92, 653 }, {  93, 653 },
 {  94, 653 }, {  95, 653 }, {  96, 653 }, {  97, 653 }, {  98, 653 },
 {  99, 653 }, { 100, 653 }, { 101, 653 }, { 102, 653 }, { 103, 653 },
 { 104, 653 }, { 105, 653 }, { 106, 653 }, { 107, 653 }, { 108, 653 },
 { 109, 653 }, { 110, 653 }, { 111, 653 }, { 112, 653 }, { 113, 653 },
 { 114, 653 }, { 115, 653 }, { 116, 653 }, { 117, 653 }, { 118, 653 },
 { 119, 653 }, { 120, 653 }, { 121, 653 }, { 122, 653 }, { 123, 653 },
 { 124, 653 }, { 125, 653 }, { 126, 653 }, { 127, 653 }, { 128, 653 },
 {   0,  37 }, {   0,2647 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   3 }, {   0,2637 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,  37 }, {   0,2621 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   7 }, {   0,2615 }, {   0,  37 },
 {   0,2613 }, {   0,  10 }, {   0,2611 }, {   0,   8 }, {   0,2609 },
 {   0,  13 }, {   0,2607 }, {   0,  14 }, {   0,2605 }, {   0,  11 },
 {   0,2603 }, {   0,   0 }, {  46, 783 }, {   0,   0 }, {  48, 805 },
 {  49, 805 }, {  50, 805 }, {  51, 805 }, {  52, 805 }, {  53, 805 },
 {  54, 805 }, {  55, 805 }, {  56, 805 }, {  57, 805 }, {  48, 806 },

 {  49, 806 }, {  50, 806 }, {  51, 806 }, {  52, 806 }, {  53, 806 },
 {  54, 806 }, {  55, 806 }, {  56, 806 }, {  57, 806 }, {  42, 272 },
 {   0,  37 }, {   0,2577 }, {   0,  12 }, {   0,2575 }, {  47, 893 },
 {   0,  18 }, {   0,2572 }, {   0,  17 }, {   0,2570 }, {  46,1017 },
 {  69, 833 }, {  48, 773 }, {  49, 773 }, {  50, 773 }, {  51, 773 },
 {  52, 773 }, {  53, 773 }, {  54, 773 }, {  55, 773 }, {  56, 773 },
 {  57, 773 }, {   0,   0 }, {   0,   0 }, {  58, 266 }, {   0,  18 },
 {   0,2553 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  69,1039 }, {   0,   0 }, {   0,   0 },
 {  10, 219 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, { 101, 833 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,  18 }, {   0,2531 }, {   0,  23 }, {   0,2529 },
 {   0,  22 }, {   0,2527 }, {   0,  23 }, {   0,2525 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 193 }, { 101,1039 },
 {   0,   0 }, {  65,1016 }, {  66,1016 }, {  67,1016 }, {  68,1016 },
 {  69,1016 }, {  70,1016 }, {  71,1016 }, {  72,1016 }, {  73,1016 },
 {  74,1016 }, {  75,1016 }, {  76,1016 }, {  77,1016 }, {  78,1016 },
 {  79,1016 }, {  80,1016 }, {  81,1016 }, {  82,1016 }, {  83,1016 },
 {  84,1016 }, {  85,1016 }, {  86,1016 }, {  87,1016 }, {  88,1016 },

 {  89,1016 }, {  90,1016 }, {   0,   5 }, {   0,2485 }, {  47,1305 },
 {   0,   0 }, {  95,1016 }, {   0,   0 }, {  97,1016 }, {  98,1016 },
 {  99,1016 }, { 100,1016 }, { 101,1016 }, { 102,1016 }, { 103,1016 },
 { 104,1016 }, { 105,1016 }, { 106,1016 }, { 107,1016 }, { 108,1016 },
 { 109,1016 }, { 110,1016 }, { 111,1016 }, { 112,1016 }, { 113,1016 },
 { 114,1016 }, { 115,1016 }, { 116,1016 }, { 117,1016 }, { 118,1016 },
 { 119,1016 }, { 120,1016 }, { 121,1016 }, { 122,1016 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  23 }, {   0,2439 },

 {   0,   0 }, {  48,1016 }, {  49,1016 }, {  50,1016 }, {  51,1016 },
 {  52,1016 }, {  53,1016 }, {  54,1016 }, {  55,1016 }, {  56,1016 },
 {  57,1016 }, {   0,  36 }, {   0,2426 }, {   0,  26 }, {   0,2424 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,1016 }, {  66,1016 },
 {  67,1016 }, {  68,1016 }, {  69,1016 }, {  70,1016 }, {  71,1016 },
 {  72,1016 }, {  73,1016 }, {  74,1016 }, {  75,1016 }, {  76,1016 },
 {  77,1016 }, {  78,1016 }, {  79,1016 }, {  80,1016 }, {  81,1016 },
 {  82,1016 }, {  83,1016 }, {  84,1016 }, {  85,1016 }, {  86,1016 },
 {  87,1016 }, {  88,1016 }, {  89,1016 }, {  90,1016 }, {   0,   5 },
 {   0,2393 }, {  47, 109 }, {   0,   0 }, {  95,1016 }, {   0,   0 },

 {  97,1016 }, {  98,1016 }, {  99,1016 }, { 100,1016 }, { 101,1016 },
 { 102,1016 }, { 103,1016 }, { 104,1016 }, { 105,1016 }, { 106,1016 },
 { 107,1016 }, { 108,1016 }, { 109,1016 }, { 110,1016 }, { 111,1016 },
 { 112,1016 }, { 113,1016 }, { 114,1016 }, { 115,1016 }, { 116,1016 },
 { 117,1016 }, { 118,1016 }, { 119,1016 }, { 120,1016 }, { 121,1016 },
 { 122,1016 }, {   0,  36 }, {   0,2361 }, {   0,  35 }, {   0,2359 },
 {   0,  33 }, {   0,2357 }, {   0,   1 }, {   0,2355 }, {   0,  20 },
 {   0,2353 }, {   0,   0 }, {  10,  62 }, {   0,  21 }, {   0,2349 },
 {   0,   9 }, {   0,2347 }, {   0,   0 }, {  48, 924 }, {  49, 924 },
 {  50, 924 }, {  51, 924 }, {  52, 924 }, {  53, 924 }, {  54, 924 },

 {  55, 924 }, {  56, 924 }, {  57, 924 }, {   0,  17 }, {   0,2334 },
 {   0,  22 }, {   0,2332 }, {   0,  24 }, {   0,2330 }, {   0,   0 },
 {  65,1016 }, {  66, 924 }, {  67, 924 }, {  68, 924 }, {  69, 924 },
 {  70, 924 }, {  71, 924 }, {  72, 924 }, {  73, 924 }, {  74, 924 },
 {  75, 924 }, {  76, 924 }, {  77, 924 }, {  78, 924 }, {  79, 924 },
 {  80, 924 }, {  81, 924 }, {  82, 924 }, {  83, 924 }, {  84, 924 },
 {  85, 924 }, {  86, 924 }, {  87, 924 }, {  88, 924 }, {  89, 924 },
 {  90, 924 }, {   0,   5 }, {   0,2301 }, {   0,  26 }, {   0,2299 },
 {  95, 924 }, {   0,   0 }, {  97,1016 }, {  98, 924 }, {  99, 924 },
 { 100, 924 }, { 101, 924 }, { 102, 924 }, { 103, 924 }, { 104, 924 },

 { 105, 924 }, { 106, 924 }, { 107, 924 }, { 108, 924 }, { 109, 924 },
 { 110, 924 }, { 111, 924 }, { 112, 924 }, { 113, 924 }, { 114, 924 },
 { 115, 924 }, { 116, 924 }, { 117, 924 }, { 118, 924 }, { 119, 924 },
 { 120, 924 }, { 121, 924 }, { 122, 924 }, {   0,  32 }, {   0,2269 },
 {   0,  34 }, {   0,2267 }, {   0,  27 }, {   0,2265 }, {   0,  30 },
 {   0,2263 }, {   0,  29 }, {   0,2261 }, {   0,  31 }, {   0,2259 },
 {   0,  28 }, {   0,2257 }, {   0,  19 }, {   0,2255 }, {   0,   0 },
 {  48, 832 }, {  49, 832 }, {  50, 832 }, {  51, 832 }, {  52, 832 },
 {  53, 832 }, {  54, 832 }, {  55, 832 }, {  56, 832 }, {  57, 832 },
 {   0,  36 }, {   0,2242 }, {   0,  15 }, {   0,2240 }, {   0,  16 },

 {   0,2238 }, {   0,   0 }, {  65, 832 }, {  66, 832 }, {  67, 832 },
 {  68, 832 }, {  69, 832 }, {  70, 832 }, {  71, 832 }, {  72, 832 },
 {  73, 832 }, {  74, 832 }, {  75, 832 }, {  76, 832 }, {  77, 832 },
 {  78, 832 }, {  79, 832 }, {  80, 832 }, {  81, 832 }, {  82,1016 },
 {  83, 832 }, {  84, 832 }, {  85, 832 }, {  86, 832 }, {  87, 832 },
 {  88, 832 }, {  89, 832 }, {  90, 832 }, {   0,   0 }, {   0,   0 },
 {  34, -27 }, {   0,   0 }, {  95, 832 }, {   0,   0 }, {  97, 832 },
 {  98, 832 }, {  99, 832 }, { 100, 832 }, { 101, 832 }, { 102, 832 },
 { 103, 832 }, { 104, 832 }, { 105, 832 }, { 106, 832 }, { 107, 832 },
 { 108, 832 }, { 109, 832 }, { 110, 832 }, { 111, 832 }, { 112, 832 },

 { 113, 832 }, { 114,1016 }, { 115, 832 }, { 116, 832 }, { 117, 832 },
 { 118, 832 }, { 119, 832 }, { 120, 832 }, { 121, 832 }, { 122, 832 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  92, -25 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  98, -23 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 102, -21 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 110, -19 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 114, -17 }, {   0,   0 }, { 116, -15 }, {   0,   0 }, {   0,2124 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,-229 },
 {  11,   0 }, {  12,   0 }, {  13, 130 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },

 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },
 {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },

 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, {   0,   0 }, {   0,1994 },
 {   1,-130 }, {   2,-130 }, {   3,-130 }, {   4,-130 }, {   5,-130 },

 {   6,-130 }, {   7,-130 }, {   8,-130 }, {   9,-130 }, {  10,-359 },
 {  11,-130 }, {  12,-130 }, {  13,   0 }, {  14,-130 }, {  15,-130 },
 {  16,-130 }, {  17,-130 }, {  18,-130 }, {  19,-130 }, {  20,-130 },
 {  21,-130 }, {  22,-130 }, {  23,-130 }, {  24,-130 }, {  25,-130 },
 {  26,-130 }, {  27,-130 }, {  28,-130 }, {  29,-130 }, {  30,-130 },
 {  31,-130 }, {  32,-130 }, {  33,-130 }, {  34,-130 }, {  35,-130 },
 {  36,-130 }, {  37,-130 }, {  38,-130 }, {  39,-130 }, {  40,-130 },
 {  41,-130 }, {  42,-130 }, {  43,-130 }, {  44,-130 }, {  45,-130 },
 {  46,-130 }, {  47,-130 }, {  48,-130 }, {  49,-130 }, {  50,-130 },
 {  51,-130 }, {  52,-130 }, {  53,-130 }, {  54,-130 }, {  55,-130 },

 {  56,-130 }, {  57,-130 }, {  58,-130 }, {  59,-130 }, {  60,-130 },
 {  61,-130 }, {  62,-130 }, {  63,-130 }, {  64,-130 }, {  65,-130 },
 {  66,-130 }, {  67,-130 }, {  68,-130 }, {  69,-130 }, {  70,-130 },
 {  71,-130 }, {  72,-130 }, {  73,-130 }, {  74,-130 }, {  75,-130 },
 {  76,-130 }, {  77,-130 }, {  78,-130 }, {  79,-130 }, {  80,-130 },
 {  81,-130 }, {  82,-130 }, {  83,-130 }, {  84,-130 }, {  85,-130 },
 {  86,-130 }, {  87,-130 }, {  88,-130 }, {  89,-130 }, {  90,-130 },
 {  91,-130 }, {  92,-130 }, {  93,-130 }, {  94,-130 }, {  95,-130 },
 {  96,-130 }, {  97,-130 }, {  98,-130 }, {  99,-130 }, { 100,-130 },
 { 101,-130 }, { 102,-130 }, { 103,-130 }, { 104,-130 }, { 105,-130 },

 { 106,-130 }, { 107,-130 }, { 108,-130 }, { 109,-130 }, { 110,-130 },
 { 111,-130 }, { 112,-130 }, { 113,-130 }, { 114,-130 }, { 115,-130 },
 { 116,-130 }, { 117,-130 }, { 118,-130 }, { 119,-130 }, { 120,-130 },
 { 121,-130 }, { 122,-130 }, { 123,-130 }, { 124,-130 }, { 125,-130 },
 { 126,-130 }, { 127,-130 }, { 128,-130 }, {   0,   6 }, {   0,1864 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   7 }, {   0,1842 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   6 }, {   0,1831 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,  33 }, {  49,  33 }, {  50,  33 },
 {  51,  33 }, {  52,  33 }, {  53,  33 }, {  54,  33 }, {  55,  33 },
 {  56,  33 }, {  57,  33 }, {   0,   0 }, {   0,   0 }, {   0,1804 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  46, 244 }, {  69,  60 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },

 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  69, 266 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 101,  60 }, {  69,  27 }, {  43, 670 }, {   0,   0 }, {  45, 670 },
 {   0,   0 }, {   0,   0 }, {  48, 702 }, {  49, 702 }, {  50, 702 },
 {  51, 702 }, {  52, 702 }, {  53, 702 }, {  54, 702 }, {  55, 702 },
 {  56, 702 }, {  57, 702 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 101, 266 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 101,  27 }, {   0,   0 },
 {   0,1728 }, {   1, 685 }, {   2, 685 }, {   3, 685 }, {   4, 685 },
 {   5, 685 }, {   6, 685 }, {   7, 685 }, {   8, 685 }, {   9, 685 },
 {  10,-527 }, {  11, 685 }, {  12, 685 }, {  13, 815 }, {  14, 685 },
 {  15, 685 }, {  16, 685 }, {  17, 685 }, {  18, 685 }, {  19, 685 },
 {  20, 685 }, {  21, 685 }, {  22, 685 }, {  23, 685 }, {  24, 685 },
 {  25, 685 }, {  26, 685 }, {  27, 685 }, {  28, 685 }, {  29, 685 },
 {  30, 685 }, {  31, 685 }, {  32, 685 }, {  33, 685 }, {  34, 685 },
 {  35, 685 }, {  36, 685 }, {  37, 685 }, {  38, 685 }, {  39, 685 },

 {  40, 685 }, {  41, 685 }, {  42, 685 }, {  43, 685 }, {  44, 685 },
 {  45, 685 }, {  46, 685 }, {  47, 685 }, {  48, 685 }, {  49, 685 },
 {  50, 685 }, {  51, 685 }, {  52, 685 }, {  53, 685 }, {  54, 685 },
 {  55, 685 }, {  56, 685 }, {  57, 685 }, {  58, 685 }, {  59, 685 },
 {  60, 685 }, {  61, 685 }, {  62, 685 }, {  63, 685 }, {  64, 685 },
 {  65, 685 }, {  66, 685 }, {  67, 685 }, {  68, 685 }, {  69, 685 },
 {  70, 685 }, {  71, 685 }, {  72, 685 }, {  73, 685 }, {  74, 685 },
 {  75, 685 }, {  76, 685 }, {  77, 685 }, {  78, 685 }, {  79, 685 },
 {  80, 685 }, {  81, 685 }, {  82, 685 }, {  83, 685 }, {  84, 685 },
 {  85, 685 }, {  86, 685 }, {  87, 685 }, {  88, 685 }, {  89, 685 },

 {  90, 685 }, {  91, 685 }, {  92, 685 }, {  93, 685 }, {  94, 685 },
 {  95, 685 }, {  96, 685 }, {  97, 685 }, {  98, 685 }, {  99, 685 },
 { 100, 685 }, { 101, 685 }, { 102, 685 }, { 103, 685 }, { 104, 685 },
 { 105, 685 }, { 106, 685 }, { 107, 685 }, { 108, 685 }, { 109, 685 },
 { 110, 685 }, { 111, 685 }, { 112, 685 }, { 113, 685 }, { 114, 685 },
 { 115, 685 }, { 116, 685 }, { 117, 685 }, { 118, 685 }, { 119, 685 },
 { 120, 685 }, { 121, 685 }, { 122, 685 }, { 123, 685 }, { 124, 685 },
 { 125, 685 }, { 126, 685 }, { 127, 685 }, { 128, 685 }, {   0,   6 },
 {   0,1598 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,1576 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,1561 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 815 }, {  49, 815 },
 {  50, 815 }, {  51, 815 }, {  52, 815 }, {  53, 815 }, {  54, 815 },
 {  55, 815 }, {  56, 815 }, {  57, 815 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  43, 825 }, {   0,   0 }, {  45, 825 }, {   0,   0 }, {  69, 837 },
 {  48, 835 }, {  49, 835 }, {  50, 835 }, {  51, 835 }, {  52, 835 },
 {  53, 835 }, {  54, 835 }, {  55, 835 }, {  56, 835 }, {  57, 835 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48, 837 }, {  49, 837 }, {  50, 837 }, {  51, 837 }, {  52, 837 },
 {  53, 837 }, {  54, 837 }, {  55, 837 }, {  56, 837 }, {  57, 837 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  62,-679 },
 {   0,   0 }, { 101, 837 }, {  65, 837 }, {  66, 837 }, {  67, 837 },
 {  68, 837 }, {  69, 837 }, {  70, 837 }, {  71, 837 }, {  72, 837 },

 {  73, 837 }, {  74, 837 }, {  75, 837 }, {  76, 837 }, {  77, 837 },
 {  78, 837 }, {  79, 837 }, {  80, 837 }, {  81, 837 }, {  82, 837 },
 {  83, 837 }, {  84, 837 }, {  85, 837 }, {  86, 837 }, {  87, 837 },
 {  88, 837 }, {  89, 837 }, {  90, 837 }, {   0,   5 }, {   0,1469 },
 {   0,   0 }, {   0,   0 }, {  95, 837 }, {   0,   0 }, {  97, 837 },
 {  98, 837 }, {  99, 837 }, { 100, 837 }, { 101, 837 }, { 102, 837 },
 { 103, 837 }, { 104, 837 }, { 105, 837 }, { 106, 837 }, { 107, 837 },
 { 108, 837 }, { 109, 837 }, { 110, 837 }, { 111, 837 }, { 112, 837 },
 { 113, 837 }, { 114, 837 }, { 115, 837 }, { 116, 837 }, { 117, 837 },
 { 118, 837 }, { 119, 837 }, { 120, 837 }, { 121, 837 }, { 122, 837 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },

 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {   0,   5 }, {   0,1377 }, {   0,   0 }, {   0,   0 }, {  95,   0 },
 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, -92 },
 {  49, -92 }, {  50, -92 }, {  51, -92 }, {  52, -92 }, {  53, -92 },
 {  54, -92 }, {  55, -92 }, {  56, -92 }, {  57, -92 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65, -92 }, {  66, -92 }, {  67, -92 }, {  68, -92 },
 {  69, -92 }, {  70, -92 }, {  71, -92 }, {  72, -92 }, {  73, -92 },
 {  74, -92 }, {  75, -92 }, {  76, 745 }, {  77, -92 }, {  78, -92 },
 {  79, -92 }, {  80, -92 }, {  81, -92 }, {  82, -92 }, {  83, -92 },
 {  84, -92 }, {  85, -92 }, {  86, -92 }, {  87, -92 }, {  88, -92 },

 {  89, -92 }, {  90, -92 }, {   0,   5 }, {   0,1285 }, {   0,   0 },
 {   0,   0 }, {  95, -92 }, {   0,   0 }, {  97, -92 }, {  98, -92 },
 {  99, -92 }, { 100, -92 }, { 101, -92 }, { 102, -92 }, { 103, -92 },
 { 104, -92 }, { 105, -92 }, { 106, -92 }, { 107, -92 }, { 108, 745 },
 { 109, -92 }, { 110, -92 }, { 111, -92 }, { 112, -92 }, { 113, -92 },
 { 114, -92 }, { 115, -92 }, { 116, -92 }, { 117, -92 }, { 118, -92 },
 { 119, -92 }, { 120, -92 }, { 121, -92 }, { 122, -92 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  48,-184 }, {  49,-184 }, {  50,-184 }, {  51,-184 },
 {  52,-184 }, {  53,-184 }, {  54,-184 }, {  55,-184 }, {  56,-184 },
 {  57,-184 }, {   0,   0 }, {   0,1226 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-184 }, {  66,-184 },
 {  67,-184 }, {  68,-184 }, {  69,-184 }, {  70,-184 }, {  71,-184 },
 {  72,-184 }, {  73,-184 }, {  74,-184 }, {  75,-184 }, {  76,-184 },
 {  77,-184 }, {  78,-184 }, {  79,-184 }, {  80,-184 }, {  81,-184 },
 {  82,-184 }, {  83,-184 }, {  84,-184 }, {  85, 745 }, {  86,-184 },
 {  87,-184 }, {  88,-184 }, {  89,-184 }, {  90,-184 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-184 }, {   0,   0 },

 {  97,-184 }, {  98,-184 }, {  99,-184 }, { 100,-184 }, { 101,-184 },
 { 102,-184 }, { 103,-184 }, { 104,-184 }, { 105,-184 }, { 106,-184 },
 { 107,-184 }, { 108,-184 }, { 109,-184 }, { 110,-184 }, { 111,-184 },
 { 112,-184 }, { 113,-184 }, { 114,-184 }, { 115,-184 }, { 116,-184 },
 { 117, 745 }, { 118,-184 }, { 119,-184 }, { 120,-184 }, { 121,-184 },
 { 122,-184 }, {   0,   0 }, {  65, 778 }, {  66, 778 }, {  67, 778 },
 {  68, 778 }, {  69, 778 }, {  70, 778 }, {  71, 778 }, {  72, 778 },
 {  73, 778 }, {  74, 778 }, {  75, 778 }, {  76, 778 }, {  77, 778 },
 {  78, 778 }, {  79, 778 }, {  80, 778 }, {  81, 778 }, {  82, 778 },
 {  83, 778 }, {  84, 778 }, {  85, 778 }, {  86, 778 }, {  87, 778 },

 {  88, 778 }, {  89, 778 }, {  90, 778 }, {   0,   0 }, {   0,1134 },
 {   0,   0 }, {   0,   0 }, {  95, 778 }, {   0,   0 }, {  97, 778 },
 {  98, 778 }, {  99, 778 }, { 100, 778 }, { 101, 778 }, { 102, 778 },
 { 103, 778 }, { 104, 778 }, { 105, 778 }, { 106, 778 }, { 107, 778 },
 { 108, 778 }, { 109, 778 }, { 110, 778 }, { 111, 778 }, { 112, 778 },
 { 113, 778 }, { 114, 778 }, { 115, 778 }, { 116, 778 }, { 117, 778 },
 { 118, 778 }, { 119, 778 }, { 120, 778 }, { 121, 778 }, { 122, 778 },
 {   0,   6 }, {   0,1102 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  48,  32 }, {  49,  32 }, {  50,  32 },
 {  51,  32 }, {  52,  32 }, {  53,  32 }, {  54,  32 }, {  55,  32 },
 {  56,  32 }, {  57,  32 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 {   0,1043 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },

 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 },
 {  10,-1212 }, {  11,   0 }, {  12,   0 }, {  13, 130 }, {  14,   0 },
 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },
 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },
 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 },
 {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },

 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 },
 {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 },
 {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },

 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 },
 { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 }, {   0,   0 },
 {   0, 913 }, {   1,-130 }, {   2,-130 }, {   3,-130 }, {   4,-130 },
 {   5,-130 }, {   6,-130 }, {   7,-130 }, {   8,-130 }, {   9,-130 },
 {  10,-1342 }, {  11,-130 }, {  12,-130 }, {  13,   0 }, {  14,-130 },
 {  15,-130 }, {  16,-130 }, {  17,-130 }, {  18,-130 }, {  19,-130 },
 {  20,-130 }, {  21,-130 }, {  22,-130 }, {  23,-130 }, {  24,-130 },

 {  25,-130 }, {  26,-130 }, {  27,-130 }, {  28,-130 }, {  29,-130 },
 {  30,-130 }, {  31,-130 }, {  32,-130 }, {  33,-130 }, {  34,-130 },
 {  35,-130 }, {  36,-130 }, {  37,-130 }, {  38,-130 }, {  39,-130 },
 {  40,-130 }, {  41,-130 }, {  42,-130 }, {  43,-130 }, {  44,-130 },
 {  45,-130 }, {  46,-130 }, {  47,-130 }, {  48,-130 }, {  49,-130 },
 {  50,-130 }, {  51,-130 }, {  52,-130 }, {  53,-130 }, {  54,-130 },
 {  55,-130 }, {  56,-130 }, {  57,-130 }, {  58,-130 }, {  59,-130 },
 {  60,-130 }, {  61,-130 }, {  62,-130 }, {  63,-130 }, {  64,-130 },
 {  65,-130 }, {  66,-130 }, {  67,-130 }, {  68,-130 }, {  69,-130 },
 {  70,-130 }, {  71,-130 }, {  72,-130 }, {  73,-130 }, {  74,-130 },

 {  75,-130 }, {  76,-130 }, {  77,-130 }, {  78,-130 }, {  79,-130 },
 {  80,-130 }, {  81,-130 }, {  82,-130 }, {  83,-130 }, {  84,-130 },
 {  85,-130 }, {  86,-130 }, {  87,-130 }, {  88,-130 }, {  89,-130 },
 {  90,-130 }, {  91,-130 }, {  92,-130 }, {  93,-130 }, {  94,-130 },
 {  95,-130 }, {  96,-130 }, {  97,-130 }, {  98,-130 }, {  99,-130 },
 { 100,-130 }, { 101,-130 }, { 102,-130 }, { 103,-130 }, { 104,-130 },
 { 105,-130 }, { 106,-130 }, { 107,-130 }, { 108,-130 }, { 109,-130 },
 { 110,-130 }, { 111,-130 }, { 112,-130 }, { 113,-130 }, { 114,-130 },
 { 115,-130 }, { 116,-130 }, { 117,-130 }, { 118,-130 }, { 119,-130 },
 { 120,-130 }, { 121,-130 }, { 122,-130 }, { 123,-130 }, { 124,-130 },

 { 125,-130 }, { 126,-130 }, { 127,-130 }, { 128,-130 }, {   0,   6 },
 {   0, 783 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0, 761 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0, 751 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   6 }, {   0, 741 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0, 724 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  43, 405 }, {   0,   0 }, {  45, 405 }, {   0,   0 }, {  69,  22 },
 {  48, 437 }, {  49, 437 }, {  50, 437 }, {  51, 437 }, {  52, 437 },
 {  53, 437 }, {  54, 437 }, {  55, 437 }, {  56, 437 }, {  57, 437 },
 {  48,  10 }, {  49,  10 }, {  50,  10 }, {  51,  10 }, {  52,  10 },
 {  53,  10 }, {  54,  10 }, {  55,  10 }, {  56,  10 }, {  57,  10 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },

 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   0 }, { 101,  22 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  62,-1516 }, {   0,   0 }, {   0,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },

 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {   0,   5 }, {   0, 632 }, {   0,   0 }, {   0,   0 }, {  95,   0 },
 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-837 },
 {  49,-837 }, {  50,-837 }, {  51,-837 }, {  52,-837 }, {  53,-837 },
 {  54,-837 }, {  55,-837 }, {  56,-837 }, {  57,-837 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-837 }, {  66,-837 }, {  67,-837 }, {  68,-837 },
 {  69,-837 }, {  70,-837 }, {  71,-837 }, {  72,-837 }, {  73,-837 },
 {  74,-837 }, {  75,-837 }, {  76,-837 }, {  77,-837 }, {  78,-837 },
 {  79,-837 }, {  80,-837 }, {  81,-837 }, {  82,-837 }, {  83, 318 },
 {  84,-837 }, {  85,-837 }, {  86,-837 }, {  87,-837 }, {  88,-837 },
 {  89,-837 }, {  90,-837 }, {   0,   5 }, {   0, 540 }, {   0,   0 },

 {   0,   0 }, {  95,-837 }, {   0,   0 }, {  97,-837 }, {  98,-837 },
 {  99,-837 }, { 100,-837 }, { 101,-837 }, { 102,-837 }, { 103,-837 },
 { 104,-837 }, { 105,-837 }, { 106,-837 }, { 107,-837 }, { 108,-837 },
 { 109,-837 }, { 110,-837 }, { 111,-837 }, { 112,-837 }, { 113,-837 },
 { 114,-837 }, { 115, 318 }, { 116,-837 }, { 117,-837 }, { 118,-837 },
 { 119,-837 }, { 120,-837 }, { 121,-837 }, { 122,-837 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-929 }, {  49,-929 }, {  50,-929 }, {  51,-929 },

 {  52,-929 }, {  53,-929 }, {  54,-929 }, {  55,-929 }, {  56,-929 },
 {  57,-929 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-929 }, {  66,-929 },
 {  67,-929 }, {  68,-929 }, {  69, 318 }, {  70,-929 }, {  71,-929 },
 {  72,-929 }, {  73,-929 }, {  74,-929 }, {  75,-929 }, {  76,-929 },
 {  77,-929 }, {  78,-929 }, {  79,-929 }, {  80,-929 }, {  81,-929 },
 {  82,-929 }, {  83,-929 }, {  84,-929 }, {  85,-929 }, {  86,-929 },
 {  87,-929 }, {  88,-929 }, {  89,-929 }, {  90,-929 }, {   0,   0 },
 {   0, 448 }, {   0,   0 }, {   0,   0 }, {  95,-929 }, {   0,   0 },
 {  97,-929 }, {  98,-929 }, {  99,-929 }, { 100,-929 }, { 101, 318 },

 { 102,-929 }, { 103,-929 }, { 104,-929 }, { 105,-929 }, { 106,-929 },
 { 107,-929 }, { 108,-929 }, { 109,-929 }, { 110,-929 }, { 111,-929 },
 { 112,-929 }, { 113,-929 }, { 114,-929 }, { 115,-929 }, { 116,-929 },
 { 117,-929 }, { 118,-929 }, { 119,-929 }, { 120,-929 }, { 121,-929 },
 { 122,-929 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 318 }, {  49, 318 },
 {  50, 318 }, {  51, 318 }, {  52, 318 }, {  53, 318 }, {  54, 318 },
 {  55, 318 }, {  56, 318 }, {  57, 318 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  62,-1790 }, {   0,   0 }, {   0,   0 },
 {  65, 318 }, {  66, 318 }, {  67, 318 }, {  68, 318 }, {  69, 318 },
 {  70, 318 }, {  71, 318 }, {  72, 318 }, {  73, 318 }, {  74, 318 },
 {  75, 318 }, {  76, 318 }, {  77, 318 }, {  78, 318 }, {  79, 318 },
 {  80, 318 }, {  81, 318 }, {  82, 318 }, {  83, 318 }, {  84, 318 },
 {  85, 318 }, {  86, 318 }, {  87, 318 }, {  88, 318 }, {  89, 318 },
 {  90, 318 }, {   0,   0 }, {   0, 356 }, {   0,   0 }, {   0,   0 },
 {  95, 318 }, {   0,   0 }, {  97, 318 }, {  98, 318 }, {  99, 318 },
 { 100, 318 }, { 101, 318 }, { 102, 318 }, { 103, 318 }, { 104, 318 },
 { 105, 318 }, { 106, 318 }, { 107, 318 }, { 108, 318 }, { 109, 318 },

 { 110, 318 }, { 111, 318 }, { 112, 318 }, { 113, 318 }, { 114, 318 },
 { 115, 318 }, { 116, 318 }, { 117, 318 }, { 118, 318 }, { 119, 318 },
 { 120, 318 }, { 121, 318 }, { 122, 318 }, {   0,   6 }, {   0, 324 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   5 }, {   0, 314 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,  32 }, {  49,  32 }, {  50,  32 }, {  51,  32 }, {  52,  32 },
 {  53,  32 }, {  54,  32 }, {  55,  32 }, {  56,  32 }, {  57,  32 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  48,-1155 }, {  49,-1155 }, {  50,-1155 },
 {  51,-1155 }, {  52,-1155 }, {  53,-1155 }, {  54,-1155 }, {  55,-1155 },
 {  56,-1155 }, {  57,-1155 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-1155 },
 {  66,-1155 }, {  67,-1155 }, {  68,-1155 }, {  69,  92 }, {  70,-1155 },
 {  71,-1155 }, {  72,-1155 }, {  73,-1155 }, {  74,-1155 }, {  75,-1155 },

 {  76,-1155 }, {  77,-1155 }, {  78,-1155 }, {  79,-1155 }, {  80,-1155 },
 {  81,-1155 }, {  82,-1155 }, {  83,-1155 }, {  84,-1155 }, {  85,-1155 },
 {  86,-1155 }, {  87,-1155 }, {  88,-1155 }, {  89,-1155 }, {  90,-1155 },
 {   0,   4 }, {   0, 222 }, {   0,   0 }, {   0,   0 }, {  95,-1155 },
 {   0,   0 }, {  97,-1155 }, {  98,-1155 }, {  99,-1155 }, { 100,-1155 },
 { 101,  92 }, { 102,-1155 }, { 103,-1155 }, { 104,-1155 }, { 105,-1155 },
 { 106,-1155 }, { 107,-1155 }, { 108,-1155 }, { 109,-1155 }, { 110,-1155 },
 { 111,-1155 }, { 112,-1155 }, { 113,-1155 }, { 114,-1155 }, { 115,-1155 },
 { 116,-1155 }, { 117,-1155 }, { 118,-1155 }, { 119,-1155 }, { 120,-1155 },
 { 121,-1155 }, { 122,-1155 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-1247 },
 {  49,-1247 }, {  50,-1247 }, {  51,-1247 }, {  52,-1247 }, {  53,-1247 },
 {  54,-1247 }, {  55,-1247 }, {  56,-1247 }, {  57,-1247 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-1247 }, {  66,-1247 }, {  67,-1247 }, {  68,-1247 },
 {  69,-1247 }, {  70,-1247 }, {  71,-1247 }, {  72,-1247 }, {  73,-1247 },
 {  74,-1247 }, {  75,-1247 }, {  76,-1247 }, {  77,-1247 }, {  78,-1247 },
 {  79,-1247 }, {  80,-1247 }, {  81,-1247 }, {  82,-1247 }, {  83,-1247 },

 {  84,-1247 }, {  85,-1247 }, {  86,-1247 }, {  87,-1247 }, {  88,-1247 },
 {  89,-1247 }, {  90,-1247 }, {   0,   0 }, {   0, 130 }, {   0,   0 },
 {   0,   0 }, {  95,-1247 }, {   0,   0 }, {  97,-1247 }, {  98,-1247 },
 {  99,-1247 }, { 100,-1247 }, { 101,-1247 }, { 102,-1247 }, { 103,-1247 },
 { 104,-1247 }, { 105,-1247 }, { 106,-1247 }, { 107,-1247 }, { 108,-1247 },
 { 109,-1247 }, { 110,-1247 }, { 111,-1247 }, { 112,-1247 }, { 113,-1247 },
 { 114,-1247 }, { 115,-1247 }, { 116,-1247 }, { 117,-1247 }, { 118,-1247 },
 { 119,-1247 }, { 120,-1247 }, { 121,-1247 }, { 122,-1247 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  62,-2108 }, {   0,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,   0 }, {   0,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 129,  39 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[9] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[133],
    &yy_transition[263],
    &yy_transition[393],
    &yy_transition[523],
    &yy_transition[653],
    &yy_transition[783],
    &yy_transition[913],

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[39] =
    {   0,
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 
    1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
/********************************************************************/
/* Options Section */
/********************************************************************/
/********************************************************************/
/* Preamble Section */
/********************************************************************/
 
/* End %top */
/********************************************************************/
/* Definitions Section */
/********************************************************************/



#line 1285 "lexer.cpp"

#define INITIAL 0
#define EMBED 1
#define COMMENT 2
#define STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE TipPod::LexerContext *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

int yyget_column  (yyscan_t yyscanner );

void yyset_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *yyget_lloc (yyscan_t yyscanner );
    
        void yyset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    errno=0; \
    while ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
    { \
        if( errno != EINTR) \
        { \
            YY_FATAL_ERROR( "input in flex scanner failed" ); \
            break; \
        } \
        errno=0; \
        clearerr(yyin); \
    }\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
    YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 61 "lexer.l"

    /********************************************************************/
    /* Rules Section */
    /********************************************************************/

#line 1521 "lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

    if ( !yyg->yy_init )
        {
        yyg->yy_init = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! yyg->yy_start )
            yyg->yy_start = 1;    /* first start state */

        if ( ! yyin )
            yyin = stdin;

        if ( ! yyout )
            yyout = stdout;

        if ( ! YY_CURRENT_BUFFER ) {
            yyensure_buffer_stack (yyscanner);
            YY_CURRENT_BUFFER_LVALUE =
                yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
        }

        yy_load_buffer_state(yyscanner );
        }

    while ( 1 )        /* loops until end-of-file is reached */
        {
        yy_cp = yyg->yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yyg->yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = yy_start_state_list[yyg->yy_start];
yy_match:
        {
        register yyconst struct yy_trans_info *yy_trans_info;

        register YY_CHAR yy_c;

        for ( yy_c = YY_SC_TO_UI(*yy_cp);
              (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
        yy_verify == yy_c;
              yy_c = YY_SC_TO_UI(*++yy_cp) )
            {
            yy_current_state += yy_trans_info->yy_nxt;

            if ( yy_current_state[-1].yy_nxt )
                {
                yyg->yy_last_accepting_state = yy_current_state;
                yyg->yy_last_accepting_cpos = yy_cp;
                }
            }
        }

yy_find_action:
        yy_act = yy_current_state[-1].yy_nxt;

        YY_DO_BEFORE_ACTION;

        if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
            {
            int yyl;
            for ( yyl = 0; yyl < yyleng; ++yyl )
                if ( yytext[yyl] == '\n' )
                       
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
            }

do_action:    /* This label is used only to access EOF actions. */

        switch ( yy_act )
    { /* beginning of action switch */
            case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = yyg->yy_hold_char;
            yy_cp = yyg->yy_last_accepting_cpos + 1;
            yy_current_state = yyg->yy_last_accepting_state;
            goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 66 "lexer.l"
{ yylloc->newline(); }
    YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 68 "lexer.l"
;    /* Skip whitespace */
    YY_BREAK
case 3:
YY_RULE_SETUP
#line 70 "lexer.l"
{ return T_PERIOD; }
    YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "lexer.l"
{ yylval->_int = (yytext[0] == 't' || yytext[0] == 'T');
                          return T_BOOLCONST; }
    YY_BREAK
case 5:
YY_RULE_SETUP
#line 75 "lexer.l"
{ yylval->_string = yytext;
                          return T_IDENTIFIER; }
    YY_BREAK
case 6:
YY_RULE_SETUP
#line 78 "lexer.l"
{ if (TipPod::stringToFloat(yytext, yylval->_float))
                          {
                              return T_FLOAT; 
                          }
                          else
                          {
                              std::ostringstream err;
                              err << "Out of range value: " << yytext;
                              yyerror(yylloc, yyscanner, yyextra, err.str().c_str());
                          }
                        }
    YY_BREAK
case 7:
YY_RULE_SETUP
#line 90 "lexer.l"
{ if (TipPod::stringToInt(yytext, yylval->_int))
                          {
                            return T_INTEGER; 
                          }
                          else
                          {
                              std::ostringstream err;
                              err << "Out of range value: " << yytext;
                              yyerror(yylloc, yyscanner, yyextra, err.str().c_str());
                          }
                        }
    YY_BREAK
case 8:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return T_EQUAL; }
    YY_BREAK
case 9:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return T_SCOPE; }
    YY_BREAK
case 10:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return T_SEMICOLON; }
    YY_BREAK
case 11:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return T_OPENBRACE; }
    YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return T_CLOSEBRACE; }
    YY_BREAK
case 13:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return T_OPENBRACKET; }
    YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return T_CLOSEBRACKET; }
    YY_BREAK
/********************************/
/* Emebedded code (qslang, etc) */
/********************************/
case 15:
YY_RULE_SETUP
#line 120 "lexer.l"
{ std::string lang(yytext);
                          lang = lang.substr(1, lang.size() - 2); /* Strip off the angle brackets */
                          yylval->_value = new TipPod::EmbedPodValue("", lang);
                          yylval->_string.clear();
                          BEGIN EMBED; 
                        }
    YY_BREAK
case 16:
YY_RULE_SETUP
#line 127 "lexer.l"
{ TipPod::EmbedPodValue* ev = dynamic_cast<TipPod::EmbedPodValue*>(yylval->_value);
                          if (yytext == "</" + ev->language() + ">")
                          {
                              /* Set accumulated text, and remove common leading whitespace */
                              ev->setValue(yylval->_string);
                              yylval->_string.clear();
                              ev->dedent();

                              /* We discard the text in the closing tag */
                              BEGIN 0; 
                              return T_EMBED;
                          }
                          else
                          {
                              /* Looked like a close-tag, but didn't match the open tag
                                exactly, so just accumulate it */
                              yylval->_string += yytext;
                          }
                        }
    YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 147 "lexer.l"
{ /* Accumulate text within the <> and </> tags */
                           yylval->_string += yytext;
                           yylloc->newline();
                        }
    YY_BREAK
case 18:
YY_RULE_SETUP
#line 152 "lexer.l"
{  /* Accumulate text within the <> and </> tags */
                           yylval->_string += yytext;
                        }
    YY_BREAK
/************/
/* Comments */
/************/
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 161 "lexer.l"
{ yylloc->newline(); } /* C++ style comment */
    YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 162 "lexer.l"
{ yylloc->newline(); } /* Script style comment */
    YY_BREAK
case 21:
YY_RULE_SETUP
#line 163 "lexer.l"
{ BEGIN COMMENT; }     /* Begin C-style block comment */
    YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 164 "lexer.l"
{ yylloc->newline(); } 
    YY_BREAK
case 23:
YY_RULE_SETUP
#line 165 "lexer.l"
;                      /* do nothing in comments */
    YY_BREAK
case 24:
YY_RULE_SETUP
#line 166 "lexer.l"
{ BEGIN 0; } ;         /* end C-style block comment */
    YY_BREAK
/************/
/* Strings */
/************/
case 25:
YY_RULE_SETUP
#line 175 "lexer.l"
{ yylval->_string.clear();
                          BEGIN STRING;           
                        }
    YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 179 "lexer.l"
{ yylval->_string += "\n"; yylloc->newline(); }
    YY_BREAK
case 27:
YY_RULE_SETUP
#line 180 "lexer.l"
{ yylval->_string += "\b"; }
    YY_BREAK
case 28:
YY_RULE_SETUP
#line 181 "lexer.l"
{ yylval->_string += "\t"; }
    YY_BREAK
case 29:
YY_RULE_SETUP
#line 182 "lexer.l"
{ yylval->_string += "\n"; }
    YY_BREAK
case 30:
YY_RULE_SETUP
#line 183 "lexer.l"
{ yylval->_string += "\f"; }
    YY_BREAK
case 31:
YY_RULE_SETUP
#line 184 "lexer.l"
{ yylval->_string += "\r"; }
    YY_BREAK
case 32:
YY_RULE_SETUP
#line 185 "lexer.l"
{ yylval->_string += "\""; }
    YY_BREAK
case 33:
YY_RULE_SETUP
#line 186 "lexer.l"
{ yylval->_string += "'"; }
    YY_BREAK
case 34:
YY_RULE_SETUP
#line 187 "lexer.l"
{ yylval->_string += "\\"; }
    YY_BREAK
case 35:
YY_RULE_SETUP
#line 188 "lexer.l"
{
                          BEGIN 0;
                          return T_STRING;
                        }
    YY_BREAK
case 36:
YY_RULE_SETUP
#line 192 "lexer.l"
{ yylval->_string += yytext;}
    YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(EMBED):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(STRING):
#line 195 "lexer.l"
{ yyterminate(); }
    YY_BREAK
case 37:
YY_RULE_SETUP
#line 197 "lexer.l"
{ printf("Unknown token: '%s'\n", yytext); yyterminate(); }
    YY_BREAK
case 38:
YY_RULE_SETUP
#line 201 "lexer.l"
ECHO;
    YY_BREAK
#line 1883 "lexer.cpp"

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yyg->yy_hold_char;
        YY_RESTORE_YY_MORE_OFFSET

        if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between YY_CURRENT_BUFFER and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
            YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state( yyscanner );

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

            yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++yyg->yy_c_buf_p;
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
                yy_cp = yyg->yy_c_buf_p;
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer( yyscanner ) )
            {
            case EOB_ACT_END_OF_FILE:
                {
                yyg->yy_did_buffer_switch_on_eof = 0;

                if ( yywrap(yyscanner ) )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! yyg->yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                yyg->yy_c_buf_p =
                    yyg->yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state( yyscanner );

                yy_cp = yyg->yy_c_buf_p;
                yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                yyg->yy_c_buf_p =
                &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

                yy_current_state = yy_get_previous_state( yyscanner );

                yy_cp = yyg->yy_c_buf_p;
                yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *    EOB_ACT_LAST_MATCH -
 *    EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *    EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    register char *source = yyg->yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
            {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

    else
        {
            yy_size_t num_to_read =
            YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

            int yy_c_buf_p_offset =
                (int) (yyg->yy_c_buf_p - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
                {
                yy_size_t new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
                }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                        number_to_move - 1;

            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
            yyg->yy_n_chars, num_to_read );

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        }

    if ( yyg->yy_n_chars == 0 )
        {
        if ( number_to_move == YY_MORE_ADJ )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart(yyin  ,yyscanner);
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        /* Extend the array by 50%, plus the number we really need. */
        yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
        if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
            YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
    }

    yyg->yy_n_chars += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
    register yy_state_type yy_current_state;
    register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_current_state = yy_start_state_list[yyg->yy_start];

    for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
        {
        yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 128)].yy_nxt;
        if ( yy_current_state[-1].yy_nxt )
            {
            yyg->yy_last_accepting_state = yy_current_state;
            yyg->yy_last_accepting_cpos = yy_cp;
            }
        }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *    next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
    register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
    register char *yy_cp = yyg->yy_c_buf_p;

    register int yy_c = 128;
    register yyconst struct yy_trans_info *yy_trans_info;

    yy_trans_info = &yy_current_state[(unsigned int) yy_c];
    yy_current_state += yy_trans_info->yy_nxt;
    yy_is_jam = (yy_trans_info->yy_verify != yy_c);

    if ( ! yy_is_jam )
        {
        if ( yy_current_state[-1].yy_nxt )
            {
            yyg->yy_last_accepting_state = yy_current_state;
            yyg->yy_last_accepting_cpos = yy_cp;
            }
        }

    (void)yyg;
    return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
    register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yyg->yy_hold_char;

    if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
        { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register yy_size_t number_to_move = yyg->yy_n_chars + 2;
        register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                    YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
        register char *source =
                &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

        while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
            *--dest = *--source;

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
            yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

        if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }

    *--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

    yyg->yytext_ptr = yy_bp;
    yyg->yy_hold_char = *yy_cp;
    yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
    int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    *yyg->yy_c_buf_p = yyg->yy_hold_char;

    if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
            /* This was really a NUL. */
            *yyg->yy_c_buf_p = '\0';

        else
            { /* need more input */
            yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
            ++yyg->yy_c_buf_p;

            switch ( yy_get_next_buffer( yyscanner ) )
                {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart(yyin ,yyscanner);

                    /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap(yyscanner ) )
                        return EOF;

                    if ( ! yyg->yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput(yyscanner);
#else
                    return input(yyscanner);
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
                    break;
                }
            }
        }

    c = *(unsigned char *) yyg->yy_c_buf_p;    /* cast for 8-bit char's */
    *yyg->yy_c_buf_p = '\0';    /* preserve yytext */
    yyg->yy_hold_char = *++yyg->yy_c_buf_p;

    if ( c == '\n' )
           
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

    return c;
}
#endif    /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
    }

    yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
    yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* TODO. We should be able to replace this entire function body
     * with
     *        yypop_buffer_state();
     *        yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack (yyscanner);
    if ( YY_CURRENT_BUFFER == new_buffer )
        return;

    if ( YY_CURRENT_BUFFER )
        {
        /* Flush out information for old buffer. */
        *yyg->yy_c_buf_p = yyg->yy_hold_char;
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state(yyscanner );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
    YY_BUFFER_STATE b;
    
    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b,file ,yyscanner);

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    if ( ! b )
        return;

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yyfree((void *) b->yy_ch_buf ,yyscanner );

    yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
    int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_flush_buffer(b ,yyscanner);

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if ( ! b )
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == YY_CURRENT_BUFFER )
        yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if (new_buffer == NULL)
        return;

    yyensure_buffer_stack(yyscanner);

    /* This block is copied from yy_switch_to_buffer. */
    if ( YY_CURRENT_BUFFER )
        {
        /* Flush out information for old buffer. */
        *yyg->yy_c_buf_p = yyg->yy_hold_char;
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER)
        yyg->yy_buffer_stack_top++;
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from yy_switch_to_buffer. */
    yy_load_buffer_state(yyscanner );
    yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if (!YY_CURRENT_BUFFER)
        return;

    yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    if (yyg->yy_buffer_stack_top > 0)
        --yyg->yy_buffer_stack_top;

    if (YY_CURRENT_BUFFER) {
        yy_load_buffer_state(yyscanner );
        yyg->yy_did_buffer_switch_on_eof = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
    yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    if (!yyg->yy_buffer_stack) {

        /* First allocation is just for 2 elements, since we don't know if this
         * scanner will even need a stack. We use 2 instead of 1 to avoid an
         * immediate realloc on the next call.
         */
        num_to_alloc = 1;
        yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
                                (num_to_alloc * sizeof(struct yy_buffer_state*)
                                , yyscanner);
        if ( ! yyg->yy_buffer_stack )
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
                                  
        memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
                
        yyg->yy_buffer_stack_max = num_to_alloc;
        yyg->yy_buffer_stack_top = 0;
        return;
    }

    if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

        /* Increase the buffer to prepare for a possible push. */
        int grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
        yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
                                (yyg->yy_buffer_stack,
                                num_to_alloc * sizeof(struct yy_buffer_state*)
                                , yyscanner);
        if ( ! yyg->yy_buffer_stack )
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

        /* zero only the new slots.*/
        memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
        yyg->yy_buffer_stack_max = num_to_alloc;
    }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
    YY_BUFFER_STATE b;
    
    if ( size < 2 ||
         base[size-2] != YY_END_OF_BUFFER_CHAR ||
         base[size-1] != YY_END_OF_BUFFER_CHAR )
        /* They forgot to leave room for the EOB's. */
        return 0;

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

    b->yy_buf_size = size - 2;    /* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer(b ,yyscanner );

    return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
    return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
    YY_BUFFER_STATE b;
    char *buf;
    yy_size_t n;
    int i;
    
    /* Get memory for full buffer, including space for trailing EOB's. */
    n = _yybytes_len + 2;
    buf = (char *) yyalloc(n ,yyscanner );
    if ( ! buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

    for ( i = 0; i < _yybytes_len; ++i )
        buf[i] = yybytes[i];

    buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer(buf,n ,yyscanner);
    if ( ! b )
        YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

    /* It's okay to grow etc. this buffer, and we should throw it
     * away when we're done.
     */
    b->yy_is_our_buffer = 1;

    return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
        (void) fprintf( stderr, "%s\n", msg );
    exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
        yytext[yyleng] = yyg->yy_hold_char; \
        yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
        yyg->yy_hold_char = *yyg->yy_c_buf_p; \
        *yyg->yy_c_buf_p = '\0'; \
        yyleng = yyless_macro_arg; \
        } \
    while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
    
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
    
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
    while(YY_CURRENT_BUFFER){
        yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
        YY_CURRENT_BUFFER_LVALUE = NULL;
        yypop_buffer_state(yyscanner);
    }

    /* Destroy the stack itself. */
    yyfree(yyg->yy_buffer_stack ,yyscanner);
    yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
    register int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
    register int n;
    for ( n = 0; s[n]; ++n )
        ;

    return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
    return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
    free( (char *) ptr );    /* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 201 "lexer.l"


    /********************************************************************/
    /* User Code Section */
    /********************************************************************/

